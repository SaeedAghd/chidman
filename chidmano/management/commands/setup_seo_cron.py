from django.core.management.base import BaseCommand
import os
from django.conf import settings

class Command(BaseCommand):
    help = 'تنظیم cron job های SEO'

    def add_arguments(self, parser):
        parser.add_argument(
            '--install',
            action='store_true',
            help='نصب cron job ها'
        )
        parser.add_argument(
            '--remove',
            action='store_true',
            help='حذف cron job ها'
        )
        parser.add_argument(
            '--show',
            action='store_true',
            help='نمایش cron job های موجود'
        )

    def handle(self, *args, **options):
        if options['install']:
            self.install_cron_jobs()
        elif options['remove']:
            self.remove_cron_jobs()
        elif options['show']:
            self.show_cron_jobs()
        else:
            self.stdout.write(
                self.style.ERROR('لطفاً یکی از گزینه‌های --install، --remove یا --show را انتخاب کنید')
            )

    def install_cron_jobs(self):
        """نصب cron job ها"""
        self.stdout.write(
            self.style.SUCCESS('نصب cron job های SEO...')
        )
        
        # مسیر Django
        django_path = os.path.join(settings.BASE_DIR, 'manage.py')
        
        # تعریف cron job ها
        cron_jobs = [
            {
                'schedule': '0 9 * * *',  # هر روز ساعت 9 صبح
                'command': f'cd {settings.BASE_DIR} && python {django_path} auto_seo_monitor --once',
                'description': 'مانیتورینگ روزانه SEO'
            },
            {
                'schedule': '0 10 * * 1',  # هر دوشنبه ساعت 10 صبح
                'command': f'cd {settings.BASE_DIR} && python {django_path} generate_seo_reports --weekly',
                'description': 'تولید گزارش هفتگی'
            },
            {
                'schedule': '0 11 1 * *',  # اول هر ماه ساعت 11 صبح
                'command': f'cd {settings.BASE_DIR} && python {django_path} generate_seo_reports --monthly',
                'description': 'تولید گزارش ماهانه'
            },
            {
                'schedule': '0 */6 * * *',  # هر 6 ساعت
                'command': f'cd {settings.BASE_DIR} && python {django_path} seo_alerts --check',
                'description': 'بررسی هشدارهای SEO'
            },
            {
                'schedule': '0 8 * * *',  # هر روز ساعت 8 صبح
                'command': f'cd {settings.BASE_DIR} && python {django_path} seo_alerts --send',
                'description': 'ارسال هشدارهای SEO'
            },
            {
                'schedule': '0 12 * * 0',  # هر یکشنبه ساعت 12 ظهر
                'command': f'cd {settings.BASE_DIR} && python {django_path} seo_alerts --health',
                'description': 'بررسی سلامت SEO'
            }
        ]
        
        # ایجاد فایل cron
        cron_file = os.path.join(settings.BASE_DIR, 'seo_cron.txt')
        
        with open(cron_file, 'w', encoding='utf-8') as f:
            f.write('# SEO Cron Jobs for Chidmano\n')
            f.write('# Generated by Django management command\n\n')
            
            for job in cron_jobs:
                f.write(f'# {job["description"]}\n')
                f.write(f'{job["schedule"]} {job["command"]}\n\n')
        
        self.stdout.write(
            self.style.SUCCESS(f'فایل cron در {cron_file} ایجاد شد')
        )
        
        # دستورالعمل نصب
        self.stdout.write('\n=== دستورالعمل نصب ===')
        self.stdout.write('برای نصب cron job ها، دستور زیر را اجرا کنید:')
        self.stdout.write(f'crontab {cron_file}')
        self.stdout.write('\nیا به صورت دستی:')
        for job in cron_jobs:
            self.stdout.write(f'{job["schedule"]} {job["command"]}')

    def remove_cron_jobs(self):
        """حذف cron job ها"""
        self.stdout.write(
            self.style.SUCCESS('حذف cron job های SEO...')
        )
        
        # حذف فایل cron
        cron_file = os.path.join(settings.BASE_DIR, 'seo_cron.txt')
        
        if os.path.exists(cron_file):
            os.remove(cron_file)
            self.stdout.write(
                self.style.SUCCESS(f'فایل {cron_file} حذف شد')
            )
        else:
            self.stdout.write(
                self.style.WARNING('فایل cron یافت نشد')
            )
        
        # دستورالعمل حذف
        self.stdout.write('\n=== دستورالعمل حذف ===')
        self.stdout.write('برای حذف cron job ها، دستور زیر را اجرا کنید:')
        self.stdout.write('crontab -r')
        self.stdout.write('\nیا برای ویرایش:')
        self.stdout.write('crontab -e')

    def show_cron_jobs(self):
        """نمایش cron job های موجود"""
        self.stdout.write(
            self.style.SUCCESS('نمایش cron job های SEO...')
        )
        
        # بررسی وجود فایل cron
        cron_file = os.path.join(settings.BASE_DIR, 'seo_cron.txt')
        
        if os.path.exists(cron_file):
            with open(cron_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            self.stdout.write('=== Cron Job های SEO ===')
            self.stdout.write(content)
        else:
            self.stdout.write(
                self.style.WARNING('فایل cron یافت نشد. ابتدا آن را نصب کنید.')
            )
        
        # بررسی cron job های فعال
        self.stdout.write('\n=== Cron Job های فعال ===')
        self.stdout.write('برای مشاهده cron job های فعال، دستور زیر را اجرا کنید:')
        self.stdout.write('crontab -l')

    def create_systemd_service(self):
        """ایجاد سرویس systemd برای مانیتورینگ مداوم"""
        service_content = f"""[Unit]
Description=SEO Monitoring Service for Chidmano
After=network.target

[Service]
Type=simple
User=www-data
WorkingDirectory={settings.BASE_DIR}
ExecStart=/usr/bin/python3 {settings.BASE_DIR}/manage.py auto_seo_monitor --daemon
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
        
        service_file = os.path.join(settings.BASE_DIR, 'chidmano-seo-monitor.service')
        
        with open(service_file, 'w', encoding='utf-8') as f:
            f.write(service_content)
        
        self.stdout.write(
            self.style.SUCCESS(f'فایل سرویس systemd در {service_file} ایجاد شد')
        )
        
        self.stdout.write('\n=== دستورالعمل نصب سرویس ===')
        self.stdout.write('sudo cp chidmano-seo-monitor.service /etc/systemd/system/')
        self.stdout.write('sudo systemctl daemon-reload')
        self.stdout.write('sudo systemctl enable chidmano-seo-monitor')
        self.stdout.write('sudo systemctl start chidmano-seo-monitor')
        self.stdout.write('sudo systemctl status chidmano-seo-monitor')

    def create_docker_compose(self):
        """ایجاد docker-compose برای مانیتورینگ"""
        compose_content = f"""version: '3.8'

services:
  seo-monitor:
    build: .
    command: python manage.py auto_seo_monitor --daemon
    volumes:
      - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=chidmano.settings
    restart: unless-stopped
    depends_on:
      - db
    
  seo-reports:
    build: .
    command: python manage.py generate_seo_reports --summary
    volumes:
      - .:/app
      - ./seo_reports:/app/seo_reports
    environment:
      - DJANGO_SETTINGS_MODULE=chidmano.settings
    restart: "no"
    depends_on:
      - db
"""
        
        compose_file = os.path.join(settings.BASE_DIR, 'docker-compose.seo.yml')
        
        with open(compose_file, 'w', encoding='utf-8') as f:
            f.write(compose_content)
        
        self.stdout.write(
            self.style.SUCCESS(f'فایل docker-compose در {compose_file} ایجاد شد')
        )
        
        self.stdout.write('\n=== دستورالعمل اجرا ===')
        self.stdout.write('docker-compose -f docker-compose.seo.yml up -d')
        self.stdout.write('docker-compose -f docker-compose.seo.yml logs -f seo-monitor')
